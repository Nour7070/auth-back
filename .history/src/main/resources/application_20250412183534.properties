server.port=8080
spring.application.name=demo

# Configuration PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/authdb
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:mounaboubakir}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform

# Configuration JPA
##spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=false


logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.boot=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.com.example=DEBUG

# Augmente la limite de taille des fichiers et des requêtes multipart
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB


#jwt.secret=abcdefghijklmnopqrstuvwxyzABCDEF0123456789
#management.endpoints.web.exposure.include=*


# Kafka configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer



# Configuration du Consumer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Autoriser Kafka à désérialiser les objets JSON
spring.kafka.consumer.properties.spring.json.trusted.packages=*

kafka.topics.formateur-validation-result=formateur-validation-result
kafka.topics.formateur-pending=formateur-pending
kafka.topics.user-register=user-register-topic
kafka.topics.formateur-pending=formateur-pending-topic
# Spécifier que les valeurs par défaut sont de type Map<String, Object>
spring.kafka.consumer.properties.spring.json.value.default.type=java.util.Map


# File upload properties
file.upload-dir=uploads


